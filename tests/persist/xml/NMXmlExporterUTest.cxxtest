/*
 * tests/xml/NMXmlExporterUTest.cxxtest
 *
 * Copyright (C) 2002-2007 Novamente LLC
 * All Rights Reserved
 *
 * Written by Rodrigo Barra
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/util/platform.h>
#include <opencog/persist/xml/FileXMLBufferReader.h>
#include <opencog/persist/xml/NMXmlExporter.h>
#include "NMXmlParserExperiment.h"

using namespace opencog;

class NMXmlExporterUTest :  public CxxTest::TestSuite
{

private:
    AtomSpace* atomSpace;

public:
    NMXmlExporterUTest() {
        NMXmlParserExperiment::initStaticVars();
    }

    ~NMXmlExporterUTest() {
    }

    void setUp() {
        atomSpace = new AtomSpace();
    }

    void tearDown() {
    }

    void testToXML() {
        NMXmlExporter *exporter = new NMXmlExporter(atomSpace);

        printf("Number of experiments = %d\n", NMXmlParserExperiment::getNExperiments());
        for (int i = 0; i < NMXmlParserExperiment::getNExperiments(); i++) {
            printf("\nExperiment %d\n", i);
            NMXmlParserExperiment::createExperiment(i, atomSpace);

            std::vector<XMLBufferReader*> readers(1, new FileXMLBufferReader(NMXmlParserExperiment::currentFileName));
            NMXmlParser::loadXML(readers, atomSpace);
            delete readers[0];

            HandleSeq handles;
            atomSpace->getHandleSet(std::back_inserter(handles), ATOM, true);
            //std::cout << "Handles before concat. " << handles << std::endl;
            //handles = HandleEntry::concatenation(handles, atomSpace->getAtomTable().getHandleSet(ATOM, true));
            //printf("Handles after concate %s\n", handles->toString().c_str());

            std::string xml = exporter->toXML(handles);

            printf("XML %s\n", xml.c_str());

            atomSpace = NMXmlParserExperiment::cleanupAtomSpace();

            FILE *fp = fopen(NMXmlParserExperiment::currentFileName, "w");
            fwrite(xml.c_str(), sizeof(char), xml.length(), fp);
            fclose(fp);

            readers[0] = new FileXMLBufferReader(NMXmlParserExperiment::currentFileName);
            NMXmlParser::loadXML(readers, atomSpace);
            delete readers[0];

            handles.clear();
            atomSpace->getHandleSet(back_inserter(handles), ATOM, true);
            //foreach (Handle handle, handles) {
                //if (classserver().isAssignableFrom(NODE, TLB::getAtom(handle)->getType())){
                // printf("%p %s\n", handle, ((Node *)handle)->toString().c_str());
                //}else{
                // printf("%p %s\n", handle, ((Link *)handle)->toShortString());
                //}
            //}

            TS_ASSERT(NMXmlParserExperiment::checkExperiment());
            atomSpace = NMXmlParserExperiment::destroyExperiment();
            printf("Number of experiments = %d\n", NMXmlParserExperiment::getNExperiments());
        }

        delete(exporter);
    }
};

