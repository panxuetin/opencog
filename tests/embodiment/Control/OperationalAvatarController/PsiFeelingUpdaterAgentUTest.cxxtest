/*
 * tests/embodiment/Control/OperationalAvatarController/PsiFeelingUpdaterAgentUTest.cxxtest
 *
 * @author Zhenhua Cai <czhedu@gmail.com>
 * @date   2011-06-16
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <OACMock.h>

class PsiFeelingUpdaterAgentUTest: public CxxTest::TestSuite {

private:
    
    OACMock oacMock; 

public:

    /**
     * Since this test suit needs a constructor, then we should tell cxxtest how
     * to create a test suit dynamically by writing two static functions
     * createSuite and destroySuite
     */
    static PsiFeelingUpdaterAgentUTest * createSuite() {
        return new PsiFeelingUpdaterAgentUTest();
    }

    static void destroySuite(PsiFeelingUpdaterAgentUTest * suite) {
        delete suite;
        ::system("./stop_embodiment.sh"); 
    }

    /**
     * Constructor
     */
    PsiFeelingUpdaterAgentUTest() {

        oacMock.setConfig();

        // Set your specific configurations before invoking createOAC. 
        config().set("PSI_MODULATOR_UPDATER_ENABLED", "false"); 
        config().set("PSI_DEMAND_UPDATER_ENABLED", "false"); 
        config().set("PSI_ACTION_SELECTION_ENABLED", "false"); 
        config().set("PSI_RELATION_UPDATER_ENABLED", "false"); 
        config().set("PSI_FEELING_UPDATER_ENABLED", "true"); 
        config().set("IMPORTANCE_DECAY_ENABLED", "false"); 
        config().set("ACTION_SELECTION_ENABLED", "false"); 
        config().set("COMBO_INTERPRETER_ENABLED", "false"); 
        config().set("SCHEMA_GOAL_MINING_ENABLED", "false"); 
        config().set("PROCEDURE_INTERPRETER_ENABLED", "false"); 
        config().set("ENTITY_EXPERIENCE_ENABLED", "false"); 
        config().set("FISHGRAM_ENABLED", "false");
        config().set("MONITOR_CHANGES_ENABLED", "false"); 

        oacMock.createOAC(); 

        Message * p_message; 

        // Load physiological state, such as energy, thirst etc
        p_message = oacMock.createMessageFromFile(config().get("PROXY_ID"),
                                                  oacMock.getAgentBrainId(), 
                                                  Message::STRING,
                                                  "physiological_state.xml"
                                                 ); 

        oacMock.getOAC().processNextMessage(p_message); 
        delete p_message; 

        // Load map info
        p_message = oacMock.createMessageFromFile(config().get("PROXY_ID"),
                                                  oacMock.getAgentBrainId(), 
                                                  Message::STRING,
                                                  "dog_park_map.xml"
                                                 ); 

        oacMock.getOAC().processNextMessage(p_message); 
        delete p_message; 

        OAC & oac = oacMock.getOAC(); 
        oac.psiFeelingUpdaterAgent->init(&oac);  
    }

    ~PsiFeelingUpdaterAgentUTest() {

    }

    /**
     * setUp and tearDown would be invoked before and after each single test. 
     */
    void setUp() {

    }

    void tearDown(){

    }

    void test_Init() {
        OAC & oac = oacMock.getOAC(); 

        std::string feeling_names = config().get("PSI_FEELINGS");
        int feeling_num = std::count(feeling_names.begin(), feeling_names.end(), ',') + 1;  
        TS_ASSERT_EQUALS(oac.psiFeelingUpdaterAgent->feelingMetaMap.size(), feeling_num);  
    }
};
