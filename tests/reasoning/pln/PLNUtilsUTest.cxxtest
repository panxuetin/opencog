/** PLNUtilsUTest.cxxtest --- 
 *
 * Copyright (C) 2010 OpenCog Foundation
 *
 * Author: Nil Geisweiller <nilg@laptop>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

#include <boost/assign/list_of.hpp>

#include <opencog/util/Config.h>
#include <opencog/atomspace/SimpleTruthValue.h>
#include <opencog/reasoning/pln/PLNUtils.h>
#include <opencog/reasoning/pln/PLN.h>
#include <opencog/reasoning/pln/AtomSpaceWrapper.h>

using namespace boost::assign;
using namespace opencog::pln;
using namespace opencog;
using namespace std;

//min membership strength
#define MIN_MS 0.1
//min membership count
#define MIN_MC 2

class PLNUtilsUTest : public CxxTest::TestSuite {
private:
    AtomSpace atomspace;
    AtomSpaceWrapper *asw;

    void displayTableAndBindings(TableGather& table) {
        cout << "test table: " << table.toString() << endl;
        cout << table.size() << endl;
        foreach(BoundVertex bv, table) {
            // Loglevel -5 so it will certainly display. This is in a tacky fragment of the PLN log system, that works backward 
            printSubsts(bv, currentDebugLevel);
        }
    }
public:
    PLNUtilsUTest() {
        try
        {
            config().load("pln-test.conf");
        }
        catch (RuntimeException &e)
        {
            std::cerr << e.getMessage() << std::endl;
        }
        currentDebugLevel = config().get_int("PLN_LOG_LEVEL");

        logger().info("Initializing PLN test env...");

        logger().info("Creating AtomSpaceWrappers...");
        // This is also necessary to make sure that the ASW is initialized
        // at the right time.
        asw = ASW(&atomspace);
    }

    void testUnifiesWithVariableChangeTo()
    {
        map<pHandle,pHandle> bindings;
        cout << "Testing unification" << endl;

        TS_ASSERT( unifiesWithVariableChangeTo(
                        asw,
                        mva((pHandle)AND_LINK,
                            NewNode(CONCEPT_NODE, "Osama"),
                            NewNode(CONCEPT_NODE, "terrorist")),
                        mva((pHandle)AND_LINK,
                            NewNode(CONCEPT_NODE, "Osama"),
                            NewNode(CONCEPT_NODE, "terrorist")),
                        bindings));

        TS_ASSERT(!unifiesWithVariableChangeTo(
                        asw,
                        mva((pHandle)AND_LINK,
                            NewNode(CONCEPT_NODE, "Osama"),
                            NewNode(CONCEPT_NODE, "terrorist")),
                        mva((pHandle)AND_LINK,
                            NewNode(CONCEPT_NODE, "Osama"),
                            NewNode(CONCEPT_NODE, "terrorist_DIFF")),
                        bindings));

        TS_ASSERT(!unifiesWithVariableChangeTo(
                        asw,
                        mva((pHandle)AND_LINK,
                            NewNode(CONCEPT_NODE, "Osama"),
                            NewNode(CONCEPT_NODE, "terrorist")),
                        mva((pHandle)AND_LINK,
                            NewNode(FW_VARIABLE_NODE, "Osama"),
                            NewNode(CONCEPT_NODE, "terrorist")),
                        bindings));

        TS_ASSERT( unifiesWithVariableChangeTo(
                        asw,
                        mva((pHandle)AND_LINK,
                            NewNode(FW_VARIABLE_NODE, "1"),
                            NewNode(CONCEPT_NODE, "terrorist")),
                        mva((pHandle)AND_LINK,
                            NewNode(FW_VARIABLE_NODE, "2"),
                            NewNode(CONCEPT_NODE, "terrorist")),
                        bindings));

        TS_ASSERT(!unifiesWithVariableChangeTo(
                        asw,
                        mva((pHandle)AND_LINK,
                            NewNode(FW_VARIABLE_NODE, "1"),
                            NewNode(CONCEPT_NODE, "terrorist")),
                        mva((pHandle)AND_LINK,
                            NewNode(FW_VARIABLE_NODE, "2"),
                            NewNode(CONCEPT_NODE, "terrorist_DIFF")),
                        bindings));
        TS_ASSERT(!unifiesWithVariableChangeTo(
                        asw,
                        mva((pHandle)AND_LINK,
                            NewNode(FW_VARIABLE_NODE, "1"),
                            NewNode(CONCEPT_NODE, "terrorist")),
                        mva((pHandle)AND_LINK,
                            NewNode(FW_VARIABLE_NODE, "2"),
                            NewNode(CONCEPT_NODE, "terrorist"),
                            NewNode(CONCEPT_NODE, "terrorist_DIFF")),
                        bindings));
    }

    void test_constitutedSet() {
        //add concept atom
        SimpleTruthValue c_tv(0.8, 10);
        pHandle c_h = asw->addNode(CONCEPT_NODE, "c1", c_tv);
        
        //add element atoms
        SimpleTruthValue e_tv(0.8, 10);
        pHandle e1_h = asw->addNode(CONCEPT_NODE, "e1", e_tv);
        pHandle e2_h = asw->addNode(CONCEPT_NODE, "e2", e_tv);
        pHandle e3_h = asw->addNode(CONCEPT_NODE, "e3", e_tv);
        pHandle e4_h = asw->addNode(CONCEPT_NODE, "e4", e_tv);
        pHandle e5_h = asw->addNode(CONCEPT_NODE, "e5", e_tv);
        pHandle e6_h = asw->addNode(CONCEPT_NODE, "e6", e_tv);
        pHandle e7_h = asw->addNode(CONCEPT_NODE, "e7", e_tv);

        //add memberlinks
        SimpleTruthValue m1_tv(0.8, 10);
        pHandleSeq m1_hs = list_of(e1_h)(c_h);
        pHandle m1_h = asw->addLink(MEMBER_LINK, m1_hs, m1_tv);
        pHandleSeq m2_hs = list_of(e2_h)(c_h);
        pHandle m2_h = asw->addLink(MEMBER_LINK, m2_hs, m1_tv);
        pHandleSeq m3_hs = list_of(e3_h)(c_h);
        pHandle m3_h = asw->addLink(MEMBER_LINK, m3_hs, m1_tv);
        pHandleSeq m4_hs = list_of(e4_h)(c_h);
        pHandle m4_h = asw->addLink(MEMBER_LINK, m4_hs, m1_tv);
        pHandleSeq m5_hs = list_of(e5_h)(c_h);
        pHandle m5_h = asw->addLink(MEMBER_LINK, m5_hs, m1_tv);
        SimpleTruthValue m2_tv(0.01, 10); //to check min member strength
        pHandleSeq m6_hs = list_of(e6_h)(c_h);
        pHandle m6_h = asw->addLink(MEMBER_LINK, m6_hs, m2_tv);
        SimpleTruthValue m3_tv(0.8, 1); //to check min member count
        pHandleSeq m7_hs = list_of(e7_h)(c_h);
        pHandle m7_h = asw->addLink(MEMBER_LINK, m7_hs, m3_tv);

        //test constitutedSet
        pHandleSet constituted_hs = constitutedSet(c_h, MIN_MS, MIN_MC, asw);

        cout << "test constitutedSet: " << endl;
        foreach (pHandle i, constituted_hs) {
            cout << i << " ";
        }
        cout << endl;

        TS_ASSERT(constituted_hs.find(e1_h) != constituted_hs.end());
        TS_ASSERT(constituted_hs.find(e2_h) != constituted_hs.end());
        TS_ASSERT(constituted_hs.find(e3_h) != constituted_hs.end());
        TS_ASSERT(constituted_hs.find(e4_h) != constituted_hs.end());
        TS_ASSERT(constituted_hs.find(e5_h) != constituted_hs.end());
        //e6_h and e7_h do not belong to constituted_hs
        //because they do not pass the strength or count threshold
        TS_ASSERT(constituted_hs.find(e6_h) == constituted_hs.end());
        TS_ASSERT(constituted_hs.find(e7_h) == constituted_hs.end());
    }

    void testTableGather() {
        //add nodes of various types
        SimpleTruthValue n_tv(0.8, 10);
        pHandle n1_h = asw->addNode(CONCEPT_NODE, "c1", n_tv);
        pHandle n2_h = asw->addNode(NODE, "n2", n_tv);
        pHandle n3_h = asw->addNode(NUMBER_NODE, "3", n_tv);
        pHandle n4_h = asw->addNode(PREDICATE_NODE, "p4", n_tv);
        pHandle n5_h = asw->addNode(VARIABLE_NODE, "$n5", n_tv);
        pHandle n6_h = asw->addNode(NODE, "n6", n_tv);
        pHandle n7_h = asw->addNode(NODE, "n7", n_tv);
        pHandle n8_h = asw->addNode(NODE, "n8", n_tv);

        //add links of various types
        SimpleTruthValue l_tv(0.8, 10);
        pHandleSeq l1_hs = list_of(n2_h)(n1_h);
        pHandle l1_h = asw->addLink(MEMBER_LINK, l1_hs, l_tv);
        pHandleSeq l2_hs = list_of(n4_h)(n3_h);
        pHandle l2_h = asw->addLink(EVALUATION_LINK, l2_hs, l_tv);
        pHandleSeq l3_hs = list_of(n6_h)(n5_h);
        pHandle l3_h = asw->addLink(LINK, l3_hs, l_tv);
        pHandleSeq l4_hs = list_of(n8_h)(n7_h);
        pHandle l4_h = asw->addLink(LINK, l4_hs, l_tv);

        //test TableGather
        tree<Vertex> mp1(static_cast<pHandle>(MEMBER_LINK));
        TableGather table1(mp1, asw);
        tree<Vertex> mp2(static_cast<pHandle>(EVALUATION_LINK));
        TableGather table2(mp2, asw);
        tree<Vertex> mp3(static_cast<pHandle>(LINK));
        TableGather table3(mp3, asw);
        // it seems that the case below LINK(NODE VARIABLE_NODE) does not pass
        // TableGather because of NODE type
        // this can be rectified when TableGather is replaced by
        // Linas's Pattern Matcher
        //tree<Vertex> mp4(static_cast<pHandle>(LINK));
        //mp4.append_child(mp4.begin(), static_cast<pHandle>(NODE));
        //mp4.append_child(mp4.begin(), static_cast<pHandle>(VARIABLE_NODE));
        //TableGather table4(mp4, asw);

        cout << "test table1: " << table1.toString() << endl;
        cout << "test table2: " << table2.toString() << endl;
        cout << "test table3: " << table3.toString() << endl;

        //cout << "test table4: " << table4.toString() << endl;

        //check table1
        TS_ASSERT(table1.find(weak_atom<Vertex>(l1_h)) != table1.end());
        TS_ASSERT(table1.find(weak_atom<Vertex>(l2_h)) == table1.end());
        TS_ASSERT(table1.find(weak_atom<Vertex>(l3_h)) == table1.end());
        TS_ASSERT(table1.find(weak_atom<Vertex>(l4_h)) == table1.end());

        //check table2
        TS_ASSERT(table2.find(weak_atom<Vertex>(l1_h)) == table2.end());
        TS_ASSERT(table2.find(weak_atom<Vertex>(l2_h)) != table2.end());
        TS_ASSERT(table2.find(weak_atom<Vertex>(l3_h)) == table2.end());
        TS_ASSERT(table2.find(weak_atom<Vertex>(l4_h)) == table2.end());

        //check table3
        // The first two used to be ==, but TableGather was deliberately changed
        // to allow subtypes of Links.
        TS_ASSERT(table3.find(weak_atom<Vertex>(l1_h)) != table3.end());
        TS_ASSERT(table3.find(weak_atom<Vertex>(l2_h)) != table3.end());
        TS_ASSERT(table3.find(weak_atom<Vertex>(l3_h)) != table3.end());
        TS_ASSERT(table3.find(weak_atom<Vertex>(l4_h)) != table3.end());

        //check table4
        //TS_ASSERT(table3.find(weak_atom<Vertex>(l1_h)) != table3.end());
        //TS_ASSERT(table3.find(weak_atom<Vertex>(l2_h)) != table3.end());
        //TS_ASSERT(table3.find(weak_atom<Vertex>(l3_h)) == table3.end());
        //TS_ASSERT(table3.find(weak_atom<Vertex>(l4_h)) != table3.end());
    }
        
    // Test the bindings found by TableGather. Also tests the vtree system
    void testBindings() {
        SimpleTruthValue n_tv(0.8, 10);
        
        cout << "TEST BINDINGS" << endl;
        
        asw->reset();
        
        // Actual atom
        vtree a (mva((pHandle)INHERITANCE_LINK,
                mva(asw->addNode(CONCEPT_NODE, "A", n_tv)),
                mva(asw->addNode(CONCEPT_NODE, "B", n_tv))
                ));

        pHandle h = asw->addAtom(a, n_tv, false);

        // will be found
        vtree t0 (mva((pHandle)INHERITANCE_LINK,
                 mva(asw->addNode(FW_VARIABLE_NODE, "$1", n_tv)),
                 mva(asw->addNode(CONCEPT_NODE, "B", n_tv))
                 ));
                 
        vtree t1 (mva((pHandle)INHERITANCE_LINK,
                 mva(asw->addNode(CONCEPT_NODE, "A", n_tv)),
                 mva(asw->addNode(FW_VARIABLE_NODE, "$2", n_tv))
                 ));
        
        vtree t2 (mva((pHandle)INHERITANCE_LINK,
                 mva(asw->addNode(FW_VARIABLE_NODE, "$3", n_tv)),
                 mva(asw->addNode(FW_VARIABLE_NODE, "$4", n_tv))
                 ));
        
        // won't be found
        vtree t3 (mva((pHandle)IMPLICATION_LINK,
                 mva(asw->addNode(FW_VARIABLE_NODE, "$5", n_tv)),
                 mva(asw->addNode(FW_VARIABLE_NODE, "$6", n_tv))
                 ));
        
        TableGather table0(t0, asw);
        displayTableAndBindings(table0);
        TS_ASSERT(table0.find(BoundVertex(h)) != table0.end());
        
        TableGather table1(t1, asw);
        displayTableAndBindings(table1);
        TS_ASSERT(table1.find(BoundVertex(h)) != table1.end());

        TableGather table2(t2, asw);
        displayTableAndBindings(table2);
        TS_ASSERT(table2.find(BoundVertex(h)) != table2.end());
        
        TableGather table3(t3, asw);
        displayTableAndBindings(table3);
        TS_ASSERT(table3.find(BoundVertex(h)) == table3.end());        
        
        
        vtree t100;
        t100 = t3;
        
        Vertex v;
        v = *(t3.begin());
        
        BoundVertex bv(v, new std::map<pHandle, pHandle>);
        
        BoundVertex bv2 = bv;
    }
};
