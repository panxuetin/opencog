/** feature_selectionUTest.cxxtest --- 
 *
 * Copyright (C) 2010 OpenCog Foundation
 *
 * Author: Nil Geisweiller <nilg@nilg-desktop>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>

#include <opencog/comboreduct/combo/table.h>

#include <opencog/learning/feature-selection/feature_optimization.h>
#include <opencog/learning/feature-selection/feature_scorer.h>

#define FEATURE_SELECTION_TEST_DIR PROJECT_SOURCE_DIR"/tests/learning/feature-selection/"

using namespace opencog;
using namespace combo;
using namespace std;
using boost::counting_iterator;

class feature_selectionUTest : public CxxTest::TestSuite {
    Table table;

public:
    typedef MutualInformation<set<arity_t>> FeatureScorer;


    feature_selectionUTest() {        
        table = istreamTable(FEATURE_SELECTION_TEST_DIR"dataset.csv");        
    }

    void test_incremental_selection_j1() {
        test_incremental_selection(1);
    }
    void test_incremental_selection_j4() {
        test_incremental_selection(4);
    }
    void test_redundant_features_j1() {
        test_redundant_features(1);
    }
    void test_redundant_features_j4() {
        test_redundant_features(4);
    }

private:
    
    void test_incremental_selection(unsigned n_jobs) {
        setting_omp(n_jobs);

        CTable ctable = table.compress();
        FeatureScorer fs(ctable);
        set<arity_t> features(counting_iterator<arity_t>(0),
                              counting_iterator<arity_t>(table.get_arity()));
        set<arity_t> selected_features = 
            incremental_selection(features, fs, 0.1, 1, false);

        ostreamContainer(cout, selected_features);
        cout << endl;
        
        TS_ASSERT_EQUALS(selected_features.size(), 6);
    }

    void test_redundant_features(unsigned n_jobs) {
        setting_omp(n_jobs);

        CTable ctable = table.compress();
        FeatureScorer fs(ctable);
        set<arity_t> features{3, 4, 10, 17};
        set<arity_t> redundant = redundant_features(features, fs, 0.001);

        ostreamContainer(cout, redundant);
        cout << endl;

        TS_ASSERT_EQUALS(redundant.size(), 2);        
    }
};
