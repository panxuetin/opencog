// OpenCog graph visualiser
// Copyright 2010 Joel Pitt

var nodes = new Object;
var links = new Object;

max_nodes = 100;
max_links = 500;
int current_atom;

float kinetic_energy = 0.1; /* just some value above threshold to begin */
float kinetic_threshold = 0.02;

float timestep = 1.0;
float damping = 0.95;
int max_depth = 2;

boolean ready = true;
float mass_multiplier = 10;

int selected=-1;

int hover_node=-1;

// function so that processing println logs to firefox js console
void lnPrinted(){ console.log( ln ); }

// All atoms are added using this method
void add_atom(data,textStatus,XMLHttpRequest,depth,source,handle) {
    if (depth > max_depth) return;
    // add links as Nodes, then just iterate through ALL outgoing sets of
    // Node as each element in the outgoing sets corresponds to exactly one
    if (handle == undefined) {
        handle = data.handle;
        nodes[data.handle] = new Node(data);
        //console.log( "Adding new atom " + handle + " d=" + depth + " s=" + source);
    } else {
        //console.log( "Traversing atom " + handle + " d=" + depth + " s=" + source);
    }
    var n = nodes[handle];
    //console.log( "atom with handle " + handle + " is " + n);
    // add nodes in outgoing - this means the atom is a link
    for (int i=0; i<n.outgoing.length; i++)
    {
        node_uuid = n.outgoing[i];
        /*if (node_uuid == undefined) {
            console.log("node uuid is undefined");
        }*/
        if (node_uuid != source) {
            if (!(node_uuid in nodes)) {
                $.ajax({url:"/rest/0.2/atom/"+n.outgoing[i],
                    dataType:"json",success:function (d,textStatus,XMLHttpRequest) {
                        add_atom(d,textStatus,XMLHttpRequest,depth+1,handle);
                        kinetic_energy = kinetic_threshold+1;
                    } });
            } else {
                add_atom(undefined,undefined,undefined,depth+1,handle,node_uuid);
            }
        }
    }
    // nodes or links can have incoming links
    for (int i=0; i<n.incoming.length; i++)
    {
        link_uuid = n.incoming[i];
        /*if (link_uuid == undefined) {
            console.log("link uuid is undefined");
        }*/
        if (link_uuid != source) {
            //console.log("Following " + handle + "'s incoming link " + link_uuid);
            if (!(link_uuid in nodes)) {
                $.ajax({url:"/rest/0.2/atom/"+n.incoming[i],
                    dataType:"json",success:function (d,textStatus,XMLHttpRequest) {
                        add_atom(d,textStatus,XMLHttpRequest,depth+1,handle)
                    } });
            } else {
                add_atom(undefined,undefined,undefined,depth+1,handle,link_uuid);
                //console.log("Returned from " + handle + "'s incoming link " + link_uuid);
            }
        } /*else {
            console.log("Ignoring " + handle + "'s incoming link from source " + link_uuid);
        }*/
    }
    //if (!(data.handle in nodes)) { nodes[data.handle] = new Node(data); }
}

void add_root(data,textStatus,XMLHttpRequest) {
    console.log( "Loading focus " + data.handle );
    // Handle adding root node and retrieving incoming/outgoing links
    add_atom(data,textStatus,XMLHttpRequest,0,undefined);
    nodes[data.handle].x = width/2;
    nodes[data.handle].y = height/2;
    //nodes[data.handle].pinned = true;
    nodes[data.handle].mass = 3;
    current_atom=data.handle;
    kinetic_energy = kinetic_threshold+1;
    setAtomInfo(current_atom);
}

void setup() {
  size(600, 300);
  PFont fontA = loadFont("Arial");
  textFont(fontA, 16);
  $.ajax({url:"/rest/0.2/atom/"+handle,
    dataType:"json",success:add_root});
  //random_graph(20,0.9);

}

void random_graph(int N, float connectedness) {
  // Used to generate a random graph for testing, but
  // not designed to work with new hypergraph data
  if (N > max_links) N = max_links;
  for (int i=0; i < N ; i++) {
    var data = {"handle": i,
            "outgoing": [],
            "incoming": [],
            "name": "test",
            "truthvalue": "", "sti":0, "lti":0, "type":"Node"
    };
    nodes[i] = new Node(data);
    //nodes[i].mass = random(1,3);
  }
  //cur_nodes = N;
  int n_links = N*connectedness;
  for (int i=0; i < n_links && i < max_links; i++)
  {
      Node n1,n2;
      n1 = nodes[(int)random(N)];
      n2 = n1;
      while (n2 == n1) { n2 = nodes[(int)random(N)]; }
      var data = {"handle": N+i,
              "outgoing": [n1.handle,n2.handle],
              "incoming": [],
              "name": "test",
            "truthvalue": "", "sti":0, "lti":0, "type":"Link"
          };
      nodes[N+i] = new Node(data);
      n1.incoming.push(N+i);
      n2.incoming.push(N+i);
  }
  //cur_links = n_links;
  current_atom=0;
  kinetic_energy = kinetic_threshold+1;
}

void draw() {
  background(#555555);
  if (!ready) return;
  if (kinetic_energy > kinetic_threshold || selected >= 0 ) {
      update();
      //println(kinetic_energy);
  }
  for (var i in nodes)
  {
      l = nodes[i];
      if (l.outgoing.length > 0) {
          for (var j=0; j < l.outgoing.length; j++) {
              if (current_atom == i) { stroke(#1F7CFF); }
              n = l.outgoing[j];
              if (nodes[n] == undefined) continue; // sometimes happens if not finished loading
              line(l.x,l.y, nodes[n].x,nodes[n].y);
              var dx = nodes[n].x-l.x;
              var dy = nodes[n].y-l.y;
              if (j > 0) {
                  // Draw arrows towards non-source nodes
                  // TODO: these should only be drawn for directed links
                  stroke(0);
                  fill(255);
                  pushMatrix();
                  translate(nodes[n].x,nodes[n].y);
                  angle=atan2(dy,dx);
                  rotate(-PI/2.0 + angle);
                  radius = nodes[n].mass*mass_multiplier;
                  translate(0,-radius/2.0);
                  triangle(0,0,-5,-5,5,-5);
                  //triangle(10,0,23,45,0,23);
                  //rect(-5,0,10,10);
                  popMatrix();
              }
              stroke(0);
          }
      }
  }

  for (var i in nodes)
  {
      n = nodes[i];
      if (hover_node == i) {
          fill(255,0,0);
      } else if (current_atom == i) {
          fill(#1F7CFF);
      }else if (n.outgoing.length > 0) {
          fill(128);
      } else if (selected == i) {
          fill(#2F8CFF);
      } else if (n.pinned) {
          fill(255,0,0);
      } else {
          fill(255);
      }
	  ellipse(n.x, n.y, n.mass*mass_multiplier,n.mass*mass_multiplier);
  }
  fill(255);
  text("Pin and drag nodes with left click",10,height-18);

}

void mouseMoved() {
    // Example method for showing details of the atom the cursor is over
    var near = findNearest(mouseX, mouseY);
    if (near.distance < nodes[near.index].mass*mass_multiplier) {
        // update info using jquery
        hover_node = near.index;
        //setAtomInfo(near.index);
    } else {
        hover_node = -1;
    }
}

void mousePressed() {
    var near = findNearest(mouseX,mouseY);
    //println("nearest" + near.toSource());
    var magnet = 1.5;
    if (near.distance < nodes[near.index].mass*mass_multiplier*magnet) {
        setAtomInfo(near.index);
        selected = near.index;
        nodes[selected].x = mouseX;
        nodes[selected].y = mouseY;
    }
    drag_time = 0;
}

void mouseReleased() {
    if (selected != -1 && drag_time < 5) {
        //window.location = '/opencog/atom/' + selected;
        //return;
	    //nodes[selected].pinned=!nodes[selected].pinned;
        nodes[current_atom].mass=1.0;
        current_atom=selected;
        nodes[selected].mass=3.0;
        //nodes[selected].x = width/2;
        //nodes[selected].y = height/2;
        console.log("Centering on " + selected);
        add_atom(undefined, undefined, undefined, 0, undefined, selected);

    }
    selected = -1;
    kinetic_energy = kinetic_threshold+1;
}

void mouseDragged() {
    /* if mouse pressed then fix mouseX */
    if (selected >= 0) {
        nodes[selected].x = mouseX;
        nodes[selected].y = mouseY;
    }
    drag_time += 1;
    kinetic_energy = kinetic_threshold+1;
}

float repulsion(Node n1, Node n2) {
    var repulse = 0.25 * (n1.mass + n2.mass);
    var dx = (n1.x - n2.x);
    var dy = (n1.y - n2.y);
    var distance = sqrt(dx*dx + dy*dy);
    var angle = atan2(dy,dx);
    diff = repulse * (1.0 / distance);
    dx = diff * cos(angle);
    dy = diff * sin(angle);
    float[] r = { dx, dy};
    return r
}

float attraction(Node n, Link l) {
    attract = 1.5;
    n1 = l.outgoing[0]; n2 = l.outgoing[1];
    dx = (n1.x - n2.x) / width;
    dy = (n1.y - n2.y) / height;
    distance = sqrt(dx*dx + dy*dy);
    inverse=-1;
    if (n2 == n) { inverse=1; }
    float[] a = {inverse * attract * (dx*dx),inverse * attract * (dy*dy)};
    /* squaring removes the sign, so restore it */
    if (dx < 0.0) a[0] = -a[0];
    if (dy < 0.0) a[1] = -a[1];
    return a;
}

float spring(Node n, Node l) {
    float attract = .05;
    var n1 = n; var n2 = l;
    float ideal_dist = 20.0 / n1.mass + 20.0 / n2.mass;
    var dx = (n1.x - n2.x);
    var dy = (n1.y - n2.y);
    var distance = sqrt(dx*dx + dy*dy);
    var diff = distance - ideal_dist;
    var angle = atan2(dy,dx);
    dx = diff * cos(angle);
    dy = diff * sin(angle);
    if (n2 != n) { dx = -dx; dy = -dy; }
    float[] a = {attract * dx,attract * dy};
    //println ("spring: " + a[0] + " " + a[1]);
    /* squaring removes the sign, so restore it */
    //if (dx < 0.0) a[0] = -a[0];
    //if (dy < 0.0) a[1] = -a[1];
    return a;
}

void update() {
    /* do force directed layout */
    kinetic_energy = 0.0;
    for (var i in nodes) {
        n = nodes[i];
        if (selected == i || n.pinned) { continue; }
        if (current_atom == i) {
            mx = width/2;
            my = height/2;
            if (n.x != mx || n.y != my){
                dx = (n.x - mx);
                dy = (n.y - my);
                if (dx*dx <= 25) n.x = mx;
                else n.x = n.x - (dx/2);
                if (dy*dy <= 25) n.y = my;
                else n.y = n.y - (dy/2);
            }   
            continue;
        }
        if (n.outgoing.length == 2) {
            // if there are two outgoing links and both end points exist
            // then just place node midway between end points
            x = nodes[n.outgoing[0]];
            y = nodes[n.outgoing[1]];
            if (x != undefined && y != undefined) {
                n.x = (x.x + y.x) / 2;
                n.y = (x.y + y.y) / 2;
                continue;
            }
        }
        net_force = [ 0.0, 0.0 ];
        for (var j in nodes) {
            // Electro static repulsion
            if(j == i) continue;
            r = repulsion(n,nodes[j]);
            net_force[0] += r[0];
            net_force[1] += r[1];
        }

        // Spring ideal length
        for (j in n.outgoing) {
            l = n.outgoing[j];
            //a = attraction(n, l);
            if (nodes[l] == undefined) continue;
            a = spring(n, nodes[l]);
            net_force[0] += a[0];
            net_force[1] += a[1];
        }
        // Spring ideal length
        for (j in n.incoming) {
            l = n.incoming[j];
            //a = attraction(n, l);
            if (nodes[l] == undefined) continue;
            a = spring(n,nodes[l]);
            net_force[0] += a[0];
            net_force[1] += a[1];
        }
        /* limit maximum force applied */
        //net_force[0] = constrain(net_force[0],-3,3);
        //net_force[1] = constrain(net_force[1],-3,3);
        /* prevent leaving view */
        var border = 10
        if (n.x > width-border) {
            net_force[0] = -0.1;
        }
        if (n.x < 0 + border) {
            net_force[0] = 0.1;
        }
        if (n.y > height - border) {
            net_force[1] = -0.1;
        }
        if (n.y < 0 + border) {
            net_force[1] = 0.1;
        }
        /* change velocity */
        n.vx = (n.vx + (timestep * net_force[0])) * damping;
        n.vy = (n.vy + (timestep * net_force[1])) * damping;
        /* limit maximum speed */
        //n.vx = constrain(n.vx,-3,3);
        //n.vy = constrain(n.vy,-3,3);
        /*float v = sqrt(n.vx*n.vx + n.vy*n.vy);
        if (v > 5) {
            println ("large velocity: " + i + " v=" + v);
        }*/
        /* update position */
        n.x += (timestep * n.vx);
        n.y += (timestep * n.vy);
        kinetic_energy += n.energy();
    }
    //damping -= 0.01;

}

class Node {
    int handle;
    int x,y;
    float mass = 1.0;
    float vx = 0.0, vy = 0.0;
    boolean pinned = false;
    String type;
    String name;
    int sti, lti;
    var incoming;
    var outgoing;
    var tv;

    Node(var data) {
        handle = data.handle;
        name = data.name;
        x = random(width);
        y = random(height);
        type = data.type;
        sti = data.sti;
        lti = data.lti;
        incoming = data.incoming;
        outgoing = data.outgoing;
        tv = data.truthvalue;
    }

    float energy() {
	/* v^2 * mass */
        return (this.vx*this.vx + this.vy*this.vy)*this.mass
    }

    String toString() {
        var desc = "Node";
        if (this.outgoing.length > 0) desc = "Link";
        String s = desc + " " + this.handle + ": out=[" + this.outgoing + "] in=[" + this.incoming + "]";
        return s;
    }
}

class Link {
    int handle;
    var outgoing = new Array();
    int owner; // handle of the "node" that owns this link

    Link(Node n1, Node n2){
        outgoing[0] = n1;
        outgoing[1] = n2;
    }

}

var findNearest = function (mousex, mousey) {
    var result = new Object;
    var nearest = -1;
    var nearest_dist = width*height;
    /* find nearest node */
    for (var i in nodes)
    {
        dx = nodes[i].x - mousex;
        dy = nodes[i].y - mousey;
        distance = sqrt(dx*dx + dy*dy);
        if (distance < nearest_dist) {
            nearest_dist = distance;
            nearest = i;
        }
    }
    result.index = (int)nearest;
    result.distance = nearest_dist;
    return result;
}

var setAtomInfo = function (h) {
    $('#atomuuid').html(nodes[h].handle);
    $('#atomtype').html(nodes[h].type);
    $('#atomname').html(nodes[h].name);
    $('#atomsti').html(nodes[h].sti);
    $('#atomlti').html(nodes[h].lti);
    $('#atomtv').html(tvToString(nodes[h].tv));
}

var tvToString = function (tv) {
    var result = "";
    if (tv.hasOwnProperty("simple")) {
        result += "SimpleTV [strength: " + tv.simple.str;
        result += " confidence: " + tv.simple.conf + "]";
    }
    return result;
}
