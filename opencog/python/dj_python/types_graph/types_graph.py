import networkx as nx
types_graph = nx.DiGraph()
types_graph.add_edge('Link','UnorderedLink')
types_graph.add_edge('Link','OrderedLink')
types_graph.add_edge('Link','HebbianLink')
types_graph.add_edge('FeatureLink','PartOfSpeechLink')
types_graph.add_edge('ConceptNode','WordInstanceNode')
types_graph.add_edge('ConceptNode','DefinedFrameNode')
types_graph.add_edge('ConceptNode','WordSenseNode')
types_graph.add_edge('ConceptNode','LemmaNode')
types_graph.add_edge('ConceptNode','ParseNode')
types_graph.add_edge('ConceptNode','DocumentNode')
types_graph.add_edge('ConceptNode','SentenceNode')
types_graph.add_edge('ConceptNode','SemeNode')
types_graph.add_edge('ConceptNode','FeatureNode')
types_graph.add_edge('PredicateNode','LinkGrammarDisjunctNode')
types_graph.add_edge('PredicateNode','DefinedLinguisticRelationshipNode')
types_graph.add_edge('PredicateNode','DefinedFrameElementNode')
types_graph.add_edge('PredicateNode','LinkGrammarRelationshipNode')
types_graph.add_edge('PredicateNode','GroundedPredicateNode')
types_graph.add_edge('PredicateNode','PrepositionalRelationshipNode')
types_graph.add_edge('BindLink','ExistsLink')
types_graph.add_edge('BindLink','ForAllLink')
types_graph.add_edge('BindLink','AverageLink')
types_graph.add_edge('SchemaNode','GroundedSchemaNode')
types_graph.add_edge('SchemaNode','PredicateNode')
types_graph.add_edge('ProcedureNode','SchemaNode')
types_graph.add_edge('ProcedureNode','GroundedProcedureNode')
types_graph.add_edge('SemeNode','SemanticRelationNode')
types_graph.add_edge('OrderedLink','ExecutionOutputLink')
types_graph.add_edge('OrderedLink','BindLink')
types_graph.add_edge('OrderedLink','SubsetLink')
types_graph.add_edge('OrderedLink','SequentialAndLink')
types_graph.add_edge('OrderedLink','IsAcceptableSecondArgLink')
types_graph.add_edge('OrderedLink','HypotheticalLink')
types_graph.add_edge('OrderedLink','ExtensionalSimilarityLink')
types_graph.add_edge('OrderedLink','TailPredictiveImplicationLink')
types_graph.add_edge('OrderedLink','SimultaneousAndLink')
types_graph.add_edge('OrderedLink','AssociativeLink')
types_graph.add_edge('OrderedLink','FeatureLink')
types_graph.add_edge('OrderedLink','AsymmetricHebbianLink')
types_graph.add_edge('OrderedLink','ContextLink')
types_graph.add_edge('OrderedLink','MemberLink')
types_graph.add_edge('OrderedLink','LemmaLink')
types_graph.add_edge('OrderedLink','EvaluationLink')
types_graph.add_edge('OrderedLink','InverseHebbianLink')
types_graph.add_edge('OrderedLink','ListLink')
types_graph.add_edge('OrderedLink','ExecutionLink')
types_graph.add_edge('OrderedLink','IntensionalSimilarityLink')
types_graph.add_edge('OrderedLink','FrameElementLink')
types_graph.add_edge('OrderedLink','IntensionalInheritanceLink')
types_graph.add_edge('OrderedLink','FalseLink')
types_graph.add_edge('OrderedLink','InheritanceLink')
types_graph.add_edge('OrderedLink','PredictiveImplicationLink')
types_graph.add_edge('OrderedLink','MixedImplicationLink')
types_graph.add_edge('OrderedLink','SatisfyingSetLink')
types_graph.add_edge('OrderedLink','AtTimeLink')
types_graph.add_edge('OrderedLink','ExtensionalImplicationLink')
types_graph.add_edge('OrderedLink','EventualSequentialImplication')
types_graph.add_edge('OrderedLink','TrueLink')
types_graph.add_edge('OrderedLink','ImplicationLink')
types_graph.add_edge('OrderedLink','TypedVariableLink')
types_graph.add_edge('OrderedLink','LatestLink')
types_graph.add_edge('OrderedLink','ScholemLink')
types_graph.add_edge('OrderedLink','EventualSequentialAND')
types_graph.add_edge('OrderedLink','CountLink')
types_graph.add_edge('ObjectNode','AccessoryNode')
types_graph.add_edge('ObjectNode','StructureNode')
types_graph.add_edge('ObjectNode','AvatarNode')
types_graph.add_edge('ObjectNode','UnknownObjectNode')
types_graph.add_edge('ObjectNode','HumanoidNode')
types_graph.add_edge('ObjectNode','PetNode')
types_graph.add_edge('GroundedProcedureNode','GroundedSchemaNode')
types_graph.add_edge('GroundedProcedureNode','GroundedPredicateNode')
types_graph.add_edge('HebbianLink','SymmetricHebbianLink')
types_graph.add_edge('HebbianLink','InverseHebbianLink')
types_graph.add_edge('HebbianLink','AsymmetricHebbianLink')
types_graph.add_edge('HebbianLink','SymmetricInverseHebbianLink')
types_graph.add_edge('InheritanceLink','SchemaExecutionLink')
types_graph.add_edge('InheritanceLink','HolonymLink')
types_graph.add_edge('SchemaExecutionLink','SchemaEvaluationLink')
types_graph.add_edge('Node','AGISIMObjectPerceptNode')
types_graph.add_edge('Node','AGISIMTasteNode')
types_graph.add_edge('Node','AGISIMSelfNode')
types_graph.add_edge('Node','ConceptNode')
types_graph.add_edge('Node','AGISIMSmellNode')
types_graph.add_edge('Node','AnchorNode')
types_graph.add_edge('Node','VariableNode')
types_graph.add_edge('Node','AGISIMPixelPerceptNode')
types_graph.add_edge('Node','VariableTypeNode')
types_graph.add_edge('Node','AGIMSIMVisualPerceptNode')
types_graph.add_edge('Node','ProcedureNode')
types_graph.add_edge('Node','FWVariableNode')
types_graph.add_edge('Node','AGISIMSoundNode')
types_graph.add_edge('Node','TimeNode')
types_graph.add_edge('Node','ObjectNode')
types_graph.add_edge('Node','NumberNode')
types_graph.add_edge('Node','AGISIMPolygonPerceptNode')
types_graph.add_edge('Node','CWColorNode')
types_graph.add_edge('Node','AGISIMPerceptNode')
types_graph.add_edge('Node','WordNode')
types_graph.add_edge('Node','CWPixelPerceptNode')
types_graph.add_edge('AssociativeLink','WordSenseLink')
types_graph.add_edge('AssociativeLink','ParseLink')
types_graph.add_edge('AssociativeLink','WordInstanceLink')
types_graph.add_edge('AssociativeLink','ReferenceLink')
types_graph.add_edge('UnorderedLink','SymmetricHebbianLink')
types_graph.add_edge('UnorderedLink','SetLink')
types_graph.add_edge('UnorderedLink','SimilarityLink')
types_graph.add_edge('UnorderedLink','SimultaneousEquivalenceLink')
types_graph.add_edge('UnorderedLink','OrLink')
types_graph.add_edge('UnorderedLink','AndLink')
types_graph.add_edge('UnorderedLink','CosenseLink')
types_graph.add_edge('UnorderedLink','EquivalenceLink')
types_graph.add_edge('UnorderedLink','ExtensionalEquivalenceLink')
types_graph.add_edge('UnorderedLink','NotLink')
types_graph.add_edge('UnorderedLink','SymmetricInverseHebbianLink')
types_graph.add_edge('Atom','Node')
types_graph.add_edge('Atom','Link')
types_graph.add_edge('Atom','Atom')
types_graph.add_edge('FeatureNode','PartOfSpeechNode')
types_graph.add_edge('FeatureNode','DefinedLinguisticConceptNode')
types_graph.remove_edge('Atom','Atom')
nx.write_dot(types_graph,'dot_atom.dot')
